Normal mode is the default when entering Vim. 
In Normal mode, use the following keys to move the cursor around:
  h: Move cursor to the left
  j: Move cursor down
  k: move cursor up
  l: move cursor to the right

When in another mode, such as Insert mode or Visual mode, you can return to Normal mode by pressing the escape button

  <esc>

To close the editor while also saving changes to the file press colon followed by w then q

  <:wq> 

while in Normal mode

  Colons <:> trigger Command-Line mode.
  the <w> character is used to write(save) the file.
  The <q> character is used to quit the editor session.
  All together the characters <:qw>(colon,q,w) enters Command-Line mode then exits the editor while saving any changes.

To close the editor without saving changes press 

  <:q!>

If no changes have been made to the file since opening the editor then the exclamation mark can be omitted

  <:q>

The Vim editor is a modal editor. That means that the editor behaves differently, depending on which mode you are in.
Vim has six basic modes:

  1) Normal mode:
    You start the editor in this mode. To exit other modes and return to Normal mode press

    <esc>

    Characters typed in this mode are known as Normal editor commands.
    Some examples of Normal commands are:
      the cursor movement commands:
        h,j,k,l
        zz - centers cursor on the screen
      editor commands:
        r - replaces a single character)
        ciw - change an entire word
      copy/paste comm
        yy - copies(yanks) an entire line of text
        p - pastes content from the clipboard after the cursor.

  2) Visual mode:
    Similar to Normal mode, but cursor movement commands extend a highlighted area. 
    When a non-movement command is used, it is executed for the highlighted area.

  3) Select mode:
    Typing printable characters deletes the selection and starts Insert mode.

  4) Insert mode:
    Press

      <i>
    
    to enter Insert mode.
    Typing characters works as intended, i.e. printing them in the editor(Vim manual calls it buffer).

  5) Command-line mode:
    Press
    
      <:>

    to enter this mode.
    Used to enter 'Ex' comands, 'filter' commands, and 'search pattern' commands.

  6) Ex mode:
    Like Command-line mode, but you remain in Ex mode after entering commands.

The two basic modes are Normal mode and Insert mode. In Normal mode, the characters you type are commands. 
In Insert mode, the characters you type are text. From Normal mode, Press <i> to enter Insert mode. Press <Esc> to exit to Normal mode.

Deleting characters:
  To delete characters in Normal mode, hover the cursor over it and press

    <x>

Delete an entire line:
  In Normal mode, press
  
  <dd>

Deleting a line break:
  The following deletes a line break from the current line, to join it with the following line. 
  In Normal mode, press 

  <J>

  Note that it is a capital J. If you press <J> on this line it will delete the line break on this line and
  It will join this line with the one above.

Undo and Redo:
  If you want to revert changes you made press

  <u>

  This is equivalent to <ctrl-z> in microsoft word and similar editors.
  To reverse and undo press

  <ctrl-r>

  This is a white frog

Appending:
  <i> begins Insert mode before the cursor, if the cursor highlights a character. To start Insert mode after the cursor, press

  <a>

Opening a new line:
  To begin a new line below the cursor and enter Insert mode, press

  <o>

  To begin a new line above the cursor and enter Insert mode, press

  <O>

  Note that to open a new line below use lowercase o, and above use uppercase O

Using a count(repeating commands):
  Many commands can be repeated by typing a number followed by the command. For example, moving the cursor to the line above requires
  the <k> key. To move the cursor 4 lines above press
  
  <4k>

  Similarly, to delete 3 characters combine <3> with the <x> command

  <3x>

Center page on cursor:
  If you are typing a lot eventually the cursor will reach the bottom of page and stay there, unless you move it. This can sometimes make it harder
  to read, such as when using a laptop while laying down due your hands obscuring part of the bottom screen [ :) ].
  You can center the screen on the cursor by pressing

  <zz>

Closing and writing the file:
  One way of closing the file is by entering Command-line mode with a colon

  <:>

  and entering the <q> command.

  <:q>

  However, an error will appear if unsaved changes were made. To write(save) a file press

  <:w>

  You can combine both of these commands to write and then close the file

  <:wq>

  If you wish to close the file without saving append an exclamation mark to the <q> command

  <:q!>

  There is also a shortcut that writes and exits the file which doesn't require entering Command-line mode

  <ZZ>

Chapter 3: Moving around 
  Vim has a large number of commands to position the cursor. Here is a non-exhaustive list.

Word movement:
  To move the cursor foward to the next word press lowercase w
  
  <w>

  to move to the beginning of the previous word press

  <b>
  
  To move to the end of the next word press

  <e>

  and to move to the end of the previous word

  <ge>

  A word is defined as characters that do not contain alphanumeric characters. For example, steve is a word; steve/david are two words separated
  by a foward slash.
  To move to the next word separated by white-space press capital W

  <W>

Moving to the start or end of a line:
  To move the cursor to the end of a line press

  <$>
  
  To move to the beginning of the line press 0(zero)

  <0>

  To move to the first non-blank character(e.g no spaces) press

  <^>

  The <$> can be combined with counts, like most movement commands. However, moving to the end of the line several times doesn't make sense.
  Therefore, when combined with counts the <$> command moves to the end of the following lines. For example, to move to the end of the next line press

  <2$>

  The <0> command cannot be combined with counts, same with <^>

Moving to a character:
  The single character search command allows you to move the cursor to the first instance of the given character ahead of the cursor

  <f>

  Combining the above command with a letter will find the first instance of that letter. For example, with the word zebra and the following command

  <fz>

  the cursor will jump to the word zebra. The <f> command can be combined with counts to jump to the next nth instance of the given character,
  where n is the count. For example, with this sentance

  A fox jumps over the moon

  and the command 

  <3fo>

  positions the cursor over the first o of the word moon.
  
  Similarly, to search for words behind the cursor use capital F

  <F>

  The <t> command works like <f> except it stops one character before the searched character

  <t>

  Similarly, use capital T to search and stop one character before the searched character, behind the cursor.

  <T>

  These four commands can be repeated, sans count, by pressing 

  <;>

  Similarly, you can repeat these commands, but in reverse, by pressing

  <,>

  In the case of <F> and <T> where normal behavior searches behind the cursor, <,> reverses that direction causing the command to search ahead of the cursor instead.

Matching Parenthesis:
  Often times in code you will have matching parenthesis, such as when defining a function's parameters. You can move between one parenthesis to its counterpart by pressing

    <%>

  This also works for [] and {} pairs.
  If the cursor is not on a parenthesis then it will search foward to find one.

Moving to a specific line:
  You can move to a specific line by combining a count with the <G> command. For example, to move to the 1st and 24th line respectively press

    <1G>
    <24G>

  If you don't specificy a command then the <G> command moves the cursor to the end of the file.
  You can move the cursor to the beginning(first line) by pressing

    <gg>

  This is equivalent to using <1G>
  by the by, if you want to see the numbers of lines in vim you can enter command-line mode and type <set nu>. So to recap, to enter command-line mode and activate line numbers type

    <:set nu>

  You can also move the cursor to a percentage of the file, for example half way into the file, by using a count and combining it with the <%> command.
  For example, to move to a third and half of the page press

    <33%>
    <50%>
  
  To move to the beginning, middle, and end of the visible page, respectively, you can use the following commands.

    <H>
    <M>
    <L>

Telling where you are:
  You can figure out where you are in a file via 3 ways.
  1) You can use the command:

    <alt-G>

  2) You can set the number option. This will display a line number in front of every line. Use either of the following commands

    <:set number> 
    <:set nu>
  
  To remove line numbers use
    <:set nonumber>

  3) Setting the ruler option. This will display the cursor position in the lower right corner of the Vim window

    <:set ruler>

Scrolling around:
  You can move text half a screen Up or Down by pressing

    <ctrl-u>
    <ctrl-d>

  This is similar to using <k> and <j> to move around. 
  Likewise, you can move text an entire screen up or down by using

    <ctrl-f>
    <ctrl-b>

  Similarly, You can move text up and down one line at a time by using

    <ctrl-e>
    <ctrl-y>

  You can center the screen on your cursor by pressing

    <zz>
  
  Don't confuse this with capital <ZZ>. The lowercase <zz> will center the screen, uppercase will save and quit the file.

  You can also put the cursor line at the top and bottom of the screen by using

  <zt>
  <zb>
  
  To clarify, these commands will move the text to the top and bottom of the screen, respectively, while also placing the cursor on said line.

Simple searches:
  To search for strings you can use 

    </>

  to enter command-line mode. The string that follows </> will be looked for. For example, if you wanted to search this file for the word pterodactyl
  then you would type

    </pterodactyl> 

  Don't forget to press <enter> to execute the command.
  If there are multiple instances of the word you can move to the next occurence by using

    <n>

  You can move to the previous occurence by using capital N

    <N>

  You can also search for words earlier in the file by using

    <?>

  You can specify search patterns to be case-insensitive by using the command

    <:set ignorecase>

  To make search patterns case-sensitive again use

    <:set noignorecase>

History 
  Vim remembers what commands you've previously entered. You can press <up> (the cursor key) or <down> to look through previous command-line commands.
  For example, to look at previous search pattern commands that have been executed first type </> and then press <up>.
  Likewise, to look at previous commands that start with <:> first type <:> and then use <up> to cycle through previous commands.

Searching for a word in the text:
  Another way of looking for words, besides the </> command, is to place the cursor over a word and use

    <*>

  This method has the benefit of avoiding misspellings with the </> command.
  Conversely, you can search for words in the other direction by placing the cursor over a word and using
  
    <#>

Searching for whole words:
  If you type </the> it will also match the word "soothe" and "thermometer". 
  There is a special marker used to delimit the end of a word.

    < /> > 

  Likewise, this marker is used to delimit the beginning of a word.

    < /< > 

  For example, giving the following sentence:

    soothe the thermometer

  This command will match all 3 words

    < /the >

  This one will match "soothe" and "the"

    < /the\> >

  This one will match "the" and "thermometer"

    < /\<the >

  and this one will only match "the"

    < /\<the\> >

  Notice that the <*> and <#> commands use the start-of-word and end-of-word markers to find specific matches.
  You can specify partial matches by using prepending <g> to those commands

    <g*>
    <g#>

Highlighting matches:
  Vim can highlight the results of matches by turning using this command

    <:set hlsearch>

  You can turn it off by using

    <:set nohlsearch>
  
  To remove highlighting until the next search command use 
  
    <:nohlsearch>

Tuning searches:
  There are a few options that change how searching works. These are the essential ones:
    
    <:set incsearch>

  The above command will display matches as you type them. Executing the command with <enter> will move the cursor to the match's location.

  To stop searches at the end of a file, or at the beginning if looking backwards such as with <#>, you can use this command

    <:set nowrapscan>

  The 'wrapscan' option is on by default. To turn it on again use

    <:set wrapscan>

Intermezzo
  Vim commands are only active during the current session unless saved in a Vim startup file. The default is called .vimrc and is usually located
  in your home directory. For Linux/apple this is usually found by typing "cd ~" on the command line. For windows, You can try "cd %HOMEPATH".
  If .vimrc does not exist in your home directory then you must create one save these commands in .vimrc if you wish to load them everytime you use
  Vim.
  
  You can also use this command to find where your startup files are
  
    :scriptnames
  
  You can then edit any of said scripts/files by using either of these commands
  
    :edit enter_name_of_script_here.vim
    :e enter_name_of_script_here.vim
  
  Once inside the file you can add commands sans <:>. For example, to add turning on line numbers to the .vimrc file type either
  
    <set number> 
    <set nu>
  
  Once the file is saved, every new instance of Vim will start up with those commands.

3.9 - Simple Search Patterns
  The Vim editor uses regular expressions (Regex) to specify what to search for. This section mentions only a few.
  
3.9.1 
  Beginning and end of a line:
  The pattern </include> matches the word "include" anywhere on a line,
  But the pattern 

      </^include> 

  matches the word "include" only if it begins a line.
  To match words that end a line use the pattern

    </include$>

  Both "^" and "$" take into account whitespace. For example, if the beginning of a line starts with " the" then the pattern
  </^include> will not match this. Likewise for "$".

3.9.2
  Matching any single character:
  The "." character is a substitute for any single character. The pattern

    </t.e>

  Matches any word that contains the string that has "t", followed by any character, followed by "e". The above command will match
  the words "the" and "together".   

3.9.2
  Matching special characters:
  Because certain characters such as "$", "^", "/", ".", etc have special meanings in search patterns you must "escape" them if you want
  to search for said character, instead of invoking its default function.
  To escape special characters prepend them with a backslash

    <\>

  For example, in the sentence "There is a wolf among us." If you wanted to match the string "us." use the pattern

    </us\.>

3.10
  Using Marks:
  Generally, everytime you do a command that can move the cursor further than within the same line, this is called a jump.
  When you jump to a position with the <G> command, Vim remembers the position from before this jump. This position is called a mark.
  To jump to the previous position use

    <``>

  pressing <``> again jumps to the original position. 
  The <``> command jumps back and forth between two points, while the 

    <ctrl-O>
    <ctrl-I>

  jump to older and newer positions respectively.
  The 
    
    <:jumps>

  command gives a list of positions you jumped to. The entry which you used last is marked with a ">".

3.11 
  Named Marks:
  Vim enables you to place your own marks in the text. Append the command

    <m>

  with a letter 'a' through 'z' to name and place that mark. For example, the command

    <md>

  places a mark named 'd' on wherever the cursor was when you typed it.
  To jump to a mark, append the name of the mark with <`>. For example, to jump to the mark named 'd' type

    <`d>

  To get a list of marks use the command
    
    <:marks>

  The following denote special marks.

    ``  - The cursor position before doing a jump.
    "   - The cursor position when last editing the file.
    [   - Start of the last change.
    ]   - End of the last change.

Chapter 4 - Making small changes

This chapter shows you several ways of making corrections and moving text around. It teaches you the three basic ways to change text: 
  Operator-motion,
  Visual mode, and
  text objects

4.1
  Operators and motions
  The delete operator
    
    <d>

  Command may be followed by any motion command, such as <w>, and it will delete from its current location to the place where the cursor 
  ends up, possibly including the character under the cursor. For example, to delete a word place the cursor at the beginning of a word and type

    <dw>

  this will delete from the cursor right up until before the beginning of the next word.
  The command

    <de>

  will delete from the cursor until, and including, the last character of a word.
  Whether the character under the cursor is included depends on the motion command. The reference manual calls this "exclusive" when the character
  isn't included and "inclusive" when it is. For example, the "$" command moves to the end of the line and paired with "d" will delete to the end
  of the line, including the last character. This is an "inclusive" motion.

  The pattern here is operator-motion. You first type an operator command followed by a motion command.

4.2
  Changing text
  Another operator is the 

    <c>

  Command, for 'change'. It acts almost like <d> in that it will delete text, except it leaves you in insert mode. 

